

static关键字的使用
    static：静态的
    static 用来修饰：属性，方法，代码块，内部类；
        修饰属性：
            1：按照数据类型：基本数据类型，引用数据类型
            2：按照类中声明的位置：成员变量：按照是否使用static修饰进行分类
                                        使用static：静态变量、类变量
                                        不用static：非静态变量、实例变量
                                局部变量：方法内、方法形参、构造器内，构造器形参、代码块等；

        修饰方法：
静态变量：类中的属性使用static进行修饰
    对比静态变量与实例变量
        1：个数：
        >静态变量：在内存空间中，只有一份，被类的多个对象共享
        >实例变量：类的每一个实例或对象都保存一份实例对象
        2：内存位置：
        >静态变量：jdk6之前，存放在方法区；jdk7及以后，存放在堆空间。
        >实例变量：存放在堆空间的对象实体中。
        3：加载时机：
        >静态变量：随着类的加载而加载。由于类只会加载一次，所以静态变量也只有一份
        >实例变量：随着对象的创建，而加载/分配。每个对象拥有一份。
        4：调用者：
        >静态变量：可以被类调用，也可以被使用对象进行调用。
        >实例变量：只能对象调用，类不能调用。
        5判断是否可以调用--->从生命周期的角度解释：
        >静态变量：随着类的卸载而消亡。
        >实例变量：随着对象的消亡而消亡。
        6消亡时刻：
        >静态变量：随着类的卸载而消亡。
        >实例变量：随着对象的消亡而消亡。

static修饰方法（）
    >随着类的加载而加载
    >可以通过类.静态方法 的方式直接调用静态方法。(属性和方法的前缀使用的是当前类，可以省略)
    >静态方法内，可以调用静态的属性和静态的方法，不可以调用非静态的结构。
>static修饰的方法中，不能使用this.和super.

>补充：在类的非静态方法中，可以调用当前类中的静态结构(属性、方法)或非静态结构(属性、方法)。


    1：开发中，什么时候需要将属性声明为静态的？
        >判断当前类的多个实例是否能共享此成员变量，且此成员变量的值是相同的。
        >开发中，我们常将一些常量声明是静态的。比如：Math。
    2：什么时候需要将方法声明成静态的？
        >如果方法内操作的变量，如果都是静态变量而非实例变量，则则此方法建议声明为静态方法。
        >开发中，常常将工具类的方法，声明为静态方法。比如：Array类、Math类。