为什么需要封装性？
    `高内聚`：类的内部数据操作细节自己完成，不允许外部干涉；
    `低耦合`：仅暴露少量的方法给外部使用，尽量方便外部调用。

   总的来说：把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。
如何封装？
    权限修饰符：
        四种权限修饰符：private   缺省  protected   public
    作用：
        我们可以使用4种权限修饰来修饰类和类的内部成员，当这些成员被调用时，体现可见性的大小。
    实际案例：
    在题目中，我们给animal的对象的legs属性赋值。在常识中，腿的个数无法使负数，但是如果药直接调用legs属性，不能加入判断逻辑的。so，就有了如下方法：
    >将legs的权限变为私有化，设置setLegs()方法，在此方法中加入判断逻辑。
    >提供legs的getLegs()方法，对此方法暴露，外界可以调用此属性的值。
4中权限的具体使用：
    | 修饰符    | 本类内部 | 本包内 | 其他包的子类 | 其他包非子类 |
    | --------- | -------- | ------ | ------------ | ------------ |
    | private   | √        | ×      | ×            | ×            |
    | 缺省       | √         | √      | ×            | ×            |
    | protected | √        | √      | √            | ×            |
    | public    | √        | √      | √            | √            |