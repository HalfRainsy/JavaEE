1：继承性的理解
    生活层面：财产上的继承
    代码层面：自上而下：定义A类，在定义一个B，发现B的功能与A相似，那么此时可以考虑让B继承A 关键词：extends
            自下而上：定义了类B，C，D等类，发现B，C，D有一些共性，则可以考虑将相同的属性和方法抽取出来，放在类A中，让B，C，D继承类A，同时B，C，D
            他们当中的相似功能就可以删除了。
    继承的出现，为类提供了 is_a 的关系，不能为了继承而继承。就像“猫”不能继承“狗”的类一样。“猫狗”应该继承“动物”类。可以理解为“猫”“狗”是一个动物。
2：继承的好处：
    -继承的出现减少了代码的冗余，提高了代码的复用性。
    -继承的出现，更有利于功能的扩展。
    -继承的出现，让类与类产生了 is a 的关系，为多态的使用提供了前提。
    -继承描述书屋之间的所属关系，这种关系是 ‘is a’的关系。课件，服类更通用、更一般，子类更具体。
3：继承的格式：
    类A：superClass   父类    超类    基类
    类B：subClass    子类    派生类


    class A {
    //属性  方法
    }
    class B extends A{//B继承了A

    }
4：有了继承性以后
    -子类就获取到了父类所声明的属性和方法。